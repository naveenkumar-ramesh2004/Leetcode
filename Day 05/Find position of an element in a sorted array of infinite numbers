//Find position of an element in a sorted array of infinite numbers(geeksforgeeks)
//Link:https://www.geeksforgeeks.org/dsa/find-position-element-sorted-array-infinite-numbers/

import java.util.*;

class GfG {

    public static void main(String[] args) {

        int[] arr = {3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170};
        int k = 100;
        int ans = answer(arr, k);
        System.out.println(ans);
    }
      static int answer(int[] arr,int target){
      	int start=0;
        int end=1;
        while(arr[end]<target){
          start=end+1;
          end=(2*end)+3;
      }
        return binarysearch(arr,target,start,end);
      }
      static int binarysearch(int arr[],int target,int start,int end){
      	   while (start <= end) {
            int mid = (start + end) / 2;

            if (arr[mid] == target) {
               return mid;
            } else if (arr[mid] < target) {
                start = mid + 1; 
            } else {
              
                end = mid - 1;
            }
        }

        return -1;
       }
}


//output if k=6
//op=4

//if k=100
//op=Hangup (SIGHUP)
Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: Index 16 out of bounds for length 11
	at GfG.findPos(GfG.java:42)
	at GfG.main(GfG.java:55)

// so we over come the ArrayIndexOutOfBoundsException use try catch


class GfG {

    public static void main(String[] args) {

        int[] arr = {3, 5, 7, 9, 10, 90, 100, 130, 140, 160, 170};
        int k = 170;
        int ans = answer(arr, k);
        System.out.println(ans);
    }

    static int answer(int[] arr, int target) {
        int start = 0;
        int end = 1;

        // Expand range without using arr.length
//1
        /*while (true) {
            try {
                if (arr[end] < target) {
                    start = end + 1;
                    end = (2 * end) + 3;
                } else {
                    break;
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                // If we go out of bounds, stop expanding and binary search between start and last valid index
                break;
            }
        }*/
//2
         try {
            while (arr[end] < target) {
                start = end + 1;
                end = (2 * end) + 3;
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            // If out of bounds, binary search in the last known valid range
         
        }

        // Binary search inside discovered range
        return binarysearch(arr, target, start, end);
    }

    static int binarysearch(int[] arr, int target, int start, int end) {
        while (start <= end) {
            int mid = start + (end - start) / 2;

            try {
                if (arr[mid] == target) {
                    return mid;
                } else if (arr[mid] < target) {
                    start = mid + 1;
                } else {
                    end = mid - 1;
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                // If mid is out of bounds, reduce the end
                end = mid - 1;
            }
        }

        return -1; // Not found
    }
}

