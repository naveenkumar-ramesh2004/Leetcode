//2460. Apply Operations to an Array
//https://leetcode.com/problems/apply-operations-to-an-array/description/


//This method reduce the space complexity coz we don't use extra array but  
// time complixity is O(n^2) space complexity is O(1)


// class Solution {
//     public int[] applyOperations(int[] nums) {
//         for(int i=0;i<nums.length-1;i++){
//             if(nums[i]==nums[i+1]){
//                 nums[i]*=2;
//                 nums[i+1]=0;
//                 i++;
//             }
//         }
//         int k=0;
//         for(int i=0;i<nums.length;i++){
//             if(nums[i]!=0){
//                 nums[k++]=nums[i];
//             }
//         }
//         while(k<nums.length){
//             nums[k++]=0;
//         }
//         return nums;
//     }
// }


// 2. Focus on reduce the Time O(n)


class Solution {
    public int[] applyOperations(int[] nums) {
        int k=0,i;
        int result[] = new int[nums.length];
        for( i=0;i<nums.length-1;i++){
            if(nums[i]!=0){
            if(nums[i]==nums[i+1]){
                result[k++]=nums[i++]*2;
            }
            else{
                result[k++]=nums[i];
            }
            }
            
        }
        if(i!=nums.length){
            result[k]=nums[nums.length-1];
        }
        return result;
    }
}


// ***********This code best part Test case [0,1] ************** our code only go 0 only cos we check if(nums[i]!=0) then ,nums[i]==nums[i+1] here the case fail i++ so the for loop go only the [0 - nums.length-2] 


// here put the condition if the i !=nums.length-1 we add the last element if the last element  zero or any number it does it mater; if(nums[i]==nums[i+1]) condition satify i==nums.length coz we put i++ here ,other wise it add last element int result.
//
